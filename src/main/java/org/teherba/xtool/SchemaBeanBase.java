/*  SchemaBeanBase.java - 
 *  @(#) $Id$
 *  Automatically generated by xtrans/web/xslt/genRecord.xsl at 2016-08-29T13:28:08+02:00
 *  DO NOT EDIT HERE - rather inherit from this class!
 */
package org.teherba.xtool;
import  java.text.SimpleDateFormat;
import  java.sql.Date;
import  java.sql.Timestamp;
import  org.xml.sax.Attributes;
import  org.xml.sax.helpers.AttributesImpl;
import  org.xml.sax.SAXException;

/** .
 */
public class SchemaBeanBase {
    /** Readable format for dates */
    protected static final SimpleDateFormat ISO_DATE_FORMAT      = new SimpleDateFormat("yyyy-MM-dd");
    /** Readable format for timestamps with milliseconds */
    protected static final SimpleDateFormat ISO_TIMESTAMP_FORMAT = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss.SSS");

    /** Replaces offending characters in attributes by entities,
     *  and trim right trailing whitespace
     *  @param value value of the attribute
     *  @return string with offending characters replaced by entities
     */
    protected String replaceAttrText(String value) {
        return ("x" + value
                .replaceAll("&" , "&amp;")
                .replaceAll("\'", "&apos;")
                .replaceAll("\"", "&quot;")
               ).trim().substring(1);
    } // replaceAttrText

    /** Source code version */
    public static final String CVSID = "@(#) $Id$";


    /** No-args Constructor for .
     */
    public SchemaBeanBase() {
        super();
    } // Constructor

    /** nodeName - element name */
    protected String nodeName;

    /** Sets nodeName - element name
     *  @param nodeName element name
     */
    public void setNodeName(String nodeName) {
        this.nodeName = nodeName;
    } // setNodeName

    /** Gets nodeName - element name
     *  @return element name
     */
    public String getNodeName() {
        return nodeName;
    } // getNodeName
    //----------------
    /** anchIndex - anchestor element which is described */
    protected int anchIndex;

    /** Sets anchIndex - anchestor element which is described
     *  @param anchIndex anchestor element which is described
     */
    public void setAnchIndex(int anchIndex) {
        this.anchIndex = anchIndex;
    } // setAnchIndex

    /** Gets anchIndex - anchestor element which is described
     *  @return anchestor element which is described
     */
    public int getAnchIndex() {
        return anchIndex;
    } // getAnchIndex
    //----------------
    /** startEnd - start tag or end tag */
    protected int startEnd;

    /** Sets startEnd - start tag or end tag
     *  @param startEnd start tag or end tag
     */
    public void setStartEnd(int startEnd) {
        this.startEnd = startEnd;
    } // setStartEnd

    /** Gets startEnd - start tag or end tag
     *  @return start tag or end tag
     */
    public int getStartEnd() {
        return startEnd;
    } // getStartEnd
    //----------------
    /** displayMode - element, attribute, comment, none */
    protected int displayMode;

    /** Sets displayMode - element, attribute, comment, none
     *  @param displayMode element, attribute, comment, none
     */
    public void setDisplayMode(int displayMode) {
        this.displayMode = displayMode;
    } // setDisplayMode

    /** Gets displayMode - element, attribute, comment, none
     *  @return element, attribute, comment, none
     */
    public int getDisplayMode() {
        return displayMode;
    } // getDisplayMode
    //----------------
    /** minOccurs - lower bound of cardinality */
    protected int minOccurs;

    /** Sets minOccurs - lower bound of cardinality
     *  @param minOccurs lower bound of cardinality
     */
    public void setMinOccurs(int minOccurs) {
        this.minOccurs = minOccurs;
    } // setMinOccurs

    /** Gets minOccurs - lower bound of cardinality
     *  @return lower bound of cardinality
     */
    public int getMinOccurs() {
        return minOccurs;
    } // getMinOccurs
    //----------------
    /** maxOccurs - upper bound or unbounded */
    protected int maxOccurs;

    /** Sets maxOccurs - upper bound or unbounded
     *  @param maxOccurs upper bound or unbounded
     */
    public void setMaxOccurs(int maxOccurs) {
        this.maxOccurs = maxOccurs;
    } // setMaxOccurs

    /** Gets maxOccurs - upper bound or unbounded
     *  @return upper bound or unbounded
     */
    public int getMaxOccurs() {
        return maxOccurs;
    } // getMaxOccurs
    //----------------
    /** baseType - name of element's (complex, simple) type */
    protected String baseType;

    /** Sets baseType - name of element's (complex, simple) type
     *  @param baseType name of element's (complex, simple) type
     */
    public void setBaseType(String baseType) {
        this.baseType = baseType;
    } // setBaseType

    /** Gets baseType - name of element's (complex, simple) type
     *  @return name of element's (complex, simple) type
     */
    public String getBaseType() {
        return baseType;
    } // getBaseType
    //----------------
    /** dataType - elementary datatype without xs: prefix */
    protected String dataType;

    /** Sets dataType - elementary datatype without xs: prefix
     *  @param dataType elementary datatype without xs: prefix
     */
    public void setDataType(String dataType) {
        this.dataType = dataType;
    } // setDataType

    /** Gets dataType - elementary datatype without xs: prefix
     *  @return elementary datatype without xs: prefix
     */
    public String getDataType() {
        return dataType;
    } // getDataType
    //----------------
    /** level - nesting level (0 = root) */
    protected int level;

    /** Sets level - nesting level (0 = root)
     *  @param level nesting level (0 = root)
     */
    public void setLevel(int level) {
        this.level = level;
    } // setLevel

    /** Gets level - nesting level (0 = root)
     *  @return nesting level (0 = root)
     */
    public int getLevel() {
        return level;
    } // getLevel
    //----------------
    /** position - sequential position (1 = first) for XPath */
    protected int position;

    /** Sets position - sequential position (1 = first) for XPath
     *  @param position sequential position (1 = first) for XPath
     */
    public void setPosition(int position) {
        this.position = position;
    } // setPosition

    /** Gets position - sequential position (1 = first) for XPath
     *  @return sequential position (1 = first) for XPath
     */
    public int getPosition() {
        return position;
    } // getPosition
    //----------------
    /** xPath - absolute XPath to the element */
    protected String xPath;

    /** Sets xPath - absolute XPath to the element
     *  @param xPath absolute XPath to the element
     */
    public void setXPath(String xPath) {
        this.xPath = xPath;
    } // setXPath

    /** Gets xPath - absolute XPath to the element
     *  @return absolute XPath to the element
     */
    public String getXPath() {
        return xPath;
    } // getXPath
    //----------------
    /** genericValue - some value fulfilling the restrictions */
    protected String genericValue;

    /** Sets genericValue - some value fulfilling the restrictions
     *  @param genericValue some value fulfilling the restrictions
     */
    public void setGenericValue(String genericValue) {
        this.genericValue = genericValue;
    } // setGenericValue

    /** Gets genericValue - some value fulfilling the restrictions
     *  @return some value fulfilling the restrictions
     */
    public String getGenericValue() {
        return genericValue;
    } // getGenericValue
    //----------------

    /** Gets an XML tag for the record
     *  @param namespace namespace for the generated XML tag with colon, or empty
     *  @return an XML element for a Schema record
     */
    public String getXMLTag(String namespace) {
        return namespace + "Schema";
    } // getXMLTag

    /** Assembles all attributes in an object
     *  @return attributes for an XML element representing the bean
     */
    public Attributes getAttributes() {
        String localName = "";
        AttributesImpl attrs = null;
        attrs = new AttributesImpl();
                attrs.addAttribute("", "nodeName", "nodeName", "CDATA", replaceAttrText(getNodeName()));
                attrs.addAttribute("", "anchIndex", "anchIndex", "CDATA", String.valueOf(getAnchIndex()));
                attrs.addAttribute("", "startEnd", "startEnd", "CDATA", String.valueOf(getStartEnd()));
                attrs.addAttribute("", "displayMode", "displayMode", "CDATA", String.valueOf(getDisplayMode()));
                attrs.addAttribute("", "minOccurs", "minOccurs", "CDATA", String.valueOf(getMinOccurs()));
                attrs.addAttribute("", "maxOccurs", "maxOccurs", "CDATA", String.valueOf(getMaxOccurs()));
                attrs.addAttribute("", "baseType", "baseType", "CDATA", replaceAttrText(getBaseType()));
                attrs.addAttribute("", "dataType", "dataType", "CDATA", replaceAttrText(getDataType()));
                attrs.addAttribute("", "level", "level"      , "CDATA", String.valueOf(getLevel()));
                attrs.addAttribute("", "position", "position", "CDATA", String.valueOf(getPosition()));
                attrs.addAttribute("", "xPath", "xPath"      , "CDATA", replaceAttrText(getXPath()));
                attrs.addAttribute("", "genericValue", "genericValue", "CDATA", replaceAttrText(getGenericValue()));
        return attrs;

    } // getAttributes

    /** Receive notification of the start of an element.
     *  Looks for the element which contains encoded strings.
     *  @param uri The Namespace URI, or the empty string if the element has no Namespace URI
     *  or if Namespace processing is not being performed.
     *  @param localName the local name (without prefix),
     *  or the empty string if Namespace processing is not being performed.
     *  @param qName the qualified name (with prefix),
     *  or the empty string if qualified names are not available.
     *  @param attrs the attributes attached to the element.
     *  If there are no attributes, it shall be an empty Attributes object.
     *  @throws SAX Exception
     */
    public void startElement(String uri, String localName, String qName, Attributes attrs) throws SAXException {
        try {
            if (false) {
            } else if (qName.equals("Schema")) {
                setNodeName        (attrs.getValue("nodeName"));
                setAnchIndex       (Integer.parseInt(attrs.getValue("anchIndex")));
                setStartEnd        (Integer.parseInt(attrs.getValue("startEnd")));
                setDisplayMode     (Integer.parseInt(attrs.getValue("displayMode")));
                setMinOccurs       (Integer.parseInt(attrs.getValue("minOccurs")));
                setMaxOccurs       (Integer.parseInt(attrs.getValue("maxOccurs")));
                setBaseType        (attrs.getValue("baseType"));
                setDataType        (attrs.getValue("dataType"));
                setLevel           (Integer.parseInt(attrs.getValue("level")));
                setPosition        (Integer.parseInt(attrs.getValue("position")));
                setXPath           (attrs.getValue("xPath"));
                setGenericValue    (attrs.getValue("genericValue"));
            } else {
                // silently ignore other elements
            }
        } catch (Exception exc) {
            throw new SAXException("invalid attribute value ", exc);
        }
    } // startElement

} // class SchemaBeanBase
